---
import SunIcon from '@/components/icons/Sun.astro'
import MoonIcon from '@/components/icons/Moon.astro'
import SystemIcon from '@/components/icons/System.astro'

const THEMES = ['Light', 'Dark', 'System']
---

<div class="relative ml-1 mr-1">
	<button
		id="theme-toggle-btn"
		class="appearance-none text-accentlight dark:text-accentdark border-none flex hover:scale-125 transition"
	>
		<span class="sr-only">Elige el tema</span>
		<SunIcon id="light" class="theme-toggle-icon size-8 transition-all" />
		<MoonIcon
			id="dark"
			class="theme-toggle-icon absolute size-8 transition-all"
		/>
		<SystemIcon
			id="system"
			class="theme-toggle-icon absolute size-8 transition-all"
		/>
	</button>
	<div
		id="themes-menu"
		class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
	>
		<ul>
			{
				THEMES.map((theme) => (
					<li class="themes-menu-option text-accentlight/90 dark:text-accentdark/90 font-semibold px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
						{theme}
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#themes-menu.open {
		display: inline;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}

		to {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>

<script is:inline>
	let remove = null
	//Guardo la preferencia del tema , verificando si es dark o light
	const matchMedia = window.matchMedia('(prefers-color-scheme: dark)')

	//Recupero la preferencia de tema guardada en el localstorage y retorno 'dark' o 'light' dependiendo de la preferencia
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined') {
			return localStorage.getItem('theme') ?? 'system'
		}

		return window.matchMedia('(prefers-color-scheme: dark)').matches
			? 'dark'
			: 'light'
	}

	//Actualizo el icono del tema seleccionado
	const updateIcon = (themePreference) => {
		document.querySelectorAll('.theme-toggle-icon').forEach((element) => {
			element.style.scale = element.id === themePreference ? '1' : '0'
		})
	}

	document.addEventListener('astro:page-load', () => {
		const themesMenu = document.getElementById('themes-menu')

		//Escucho si se abre el menu de temas
		document
			.getElementById('theme-toggle-btn')
			.addEventListener('click', (e) => {
				e.stopPropagation()
				console.log(e)
				const isClosed = !themesMenu.classList.contains('open')
				themesMenu.classList[isClosed ? 'add' : 'remove']('open')
			})

		//Escucho si se selecciona un tema
		document.querySelectorAll('.themes-menu-option').forEach((element) => {
			element.addEventListener('click', (e) => {
				localStorage.setItem('theme', e.target.innerText.toLowerCase().trim())
				updateTheme()
			})
		})

		//Escucho si se selecciona fuera del menu de temas
		document.addEventListener('click', () =>
			themesMenu.classList.remove('open')
		)

		//Seteo en el HTML el tema guardado en el localstorage
		const themePreference = getThemePreference()
		updateIcon(themePreference)
		const isDark =
			themePreference === 'dark' ||
			(themePreference === 'system' && matchMedia.matches)
		document.documentElement.classList[isDark ? 'add' : 'remove']('dark')
	})

	//Actualizo el tema
	const updateTheme = () => {
		if (remove != null) {
			remove()
		}
		matchMedia.addEventListener('change', updateTheme)
		remove = () => {
			matchMedia.removeEventListener('change', updateTheme)
		}

		const themePreference = getThemePreference()
		const isDark =
			themePreference === 'dark' ||
			(themePreference === 'system' && matchMedia.matches)

		updateIcon(themePreference)
		document.documentElement.classList[isDark ? 'add' : 'remove']('dark')
	}

	updateTheme()
</script>
